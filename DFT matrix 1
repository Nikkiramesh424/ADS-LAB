import java.util.Arrays;

class DFTMatrix {
    public static void dft(int[][] adjMatrix) {
        boolean[] visited = new boolean[adjMatrix.length];

        for (int i = 0; i < adjMatrix.length; i++) {
            if (!visited[i]) {
                dfs(adjMatrix, i, visited);
            }
        }
    }

    public static void dfs(int[][] adjMatrix, int s, boolean[] visited) {
        visited[s] = true;
        System.out.print(s + " ");

        for (int i = 0; i < adjMatrix.length; i++) {
            if (adjMatrix[s][i] == 1 && !visited[i]) {
                dfs(adjMatrix, i, visited);
            }
        }
    }

    static void addEdge(int[][] adjMatrix, int u, int v) {
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1;
    }

    public static void main(String[] args) {
        int V = 6;
        int[][] adjMatrix = new int[V][V];

        addEdge(adjMatrix, 0, 1);
        addEdge(adjMatrix, 0, 2);
        addEdge(adjMatrix, 3, 4);
        addEdge(adjMatrix, 4, 5);

        System.out.println("Adjacency Matrix:");
        for (int[] row : adjMatrix) {
            System.out.println(Arrays.toString(row));
        }

        System.out.print("Depth First Traversal starting from 0: ");
        dft(adjMatrix);
    }
}
