import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class BFTMatrix {
    public static void bft(int[][] adjMatrix) {
        boolean[] visited = new boolean[adjMatrix.length];

        for (int i = 0; i < adjMatrix.length; i++) {
            if (!visited[i]) {
                bfs(adjMatrix, i, visited);
            }
        }
    }

    public static void bfs(int[][] adjMatrix, int s, boolean[] visited) {
        Queue<Integer> q = new LinkedList<>();
        visited[s] = true;
        q.add(s);

        while (!q.isEmpty()) {
            int curr = q.poll();
            System.out.print(curr + " ");

            for (int i = 0; i < adjMatrix.length; i++) {
                if (adjMatrix[curr][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    q.add(i);
                }
            }
        }
    }

    static void addEdge(int[][] adjMatrix, int u, int v) {
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1;
    }

    public static void main(String[] args) {
        int V = 6;
        int[][] adjMatrix = new int[V][V];

        addEdge(adjMatrix, 0, 1);
        addEdge(adjMatrix, 0, 2);
        addEdge(adjMatrix, 3, 4);
        addEdge(adjMatrix, 4, 5);

        System.out.println("Adjacency Matrix:");
        for (int[] row : adjMatrix) {
            System.out.println(Arrays.toString(row));
        }

        System.out.println("BFT starting from 0:");
        bft(adjMatrix);
    }
}
